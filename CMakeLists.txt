# this is the build file for project Nui
# it is autogenerated by the xmake build system.
# do not edit by hand.

# project
cmake_minimum_required(VERSION 3.15.0)
cmake_policy(SET CMP0091 NEW)
project(Nui VERSION 0.0.1 LANGUAGES CXX)

# target
add_library(NuiCore STATIC "")
set_target_properties(NuiCore PROPERTIES OUTPUT_NAME "NuiCore")
set_target_properties(NuiCore PROPERTIES ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/windows/x64/debug")
add_dependencies(NuiCore NuiGraphics)
target_include_directories(NuiCore PRIVATE
    Engine
)
target_compile_definitions(NuiCore PRIVATE
    UNICODE
    DEBUG
    NUI_DEBUG
)
if(MSVC)
    target_compile_options(NuiCore PRIVATE /EHsc)
elseif(Clang)
    target_compile_options(NuiCore PRIVATE -fexceptions)
    target_compile_options(NuiCore PRIVATE -fcxx-exceptions)
elseif(Gcc)
    target_compile_options(NuiCore PRIVATE -fexceptions)
endif()
set_target_properties(NuiCore PROPERTIES C_EXTENSIONS OFF)
target_compile_features(NuiCore PRIVATE c_std_17)
set_target_properties(NuiCore PROPERTIES CXX_EXTENSIONS OFF)
target_compile_features(NuiCore PRIVATE cxx_std_23)
if(MSVC)
    target_compile_options(NuiCore PRIVATE $<$<CONFIG:Debug>:-Od>)
else()
    target_compile_options(NuiCore PRIVATE -O0)
endif()
if(MSVC)
    target_compile_options(NuiCore PRIVATE -Zi)
else()
    target_compile_options(NuiCore PRIVATE -g)
endif()
if(MSVC)
    set_property(TARGET NuiCore PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(NuiCore PRIVATE
    NuiGraphics
    User32.lib
)
target_link_directories(NuiCore PRIVATE
    build/windows/x64/debug
)
target_sources(NuiCore PRIVATE
    Engine/Core/App/AppBase.cpp
    Engine/Core/App/Window.cpp
    Engine/Core/Engine/Components/TransformComponent.cpp
    Engine/Core/Engine/ECS/Entity.cpp
    Engine/Core/Engine/Engine.cpp
    Engine/Core/Engine/Systems/RenderSystem.cpp
    Engine/Core/Engine/Systems/TransformSystem.cpp
    Engine/Core/Engine/World.cpp
    Engine/Core/External/DirectXTK/SimpleMath.cpp
    Engine/Core/Input/Input.cpp
    Engine/Core/Utils/Filesystem.cpp
    Engine/Core/Utils/Log.cpp
    Engine/Core/Utils/StringConv.cpp
    Engine/Core/App/AppBase.h
    Engine/Core/App/Window.h
    Engine/Core/Common/CommonHeaders.h
    Engine/Core/Common/NuiWin.h
    Engine/Core/Common/Types.h
    Engine/Core/Engine/Components/Common.h
    Engine/Core/Engine/Components/TransformComponent.h
    Engine/Core/Engine/ECS/Common.h
    Engine/Core/Engine/ECS/Component.h
    Engine/Core/Engine/ECS/Context.h
    Engine/Core/Engine/ECS/ECS.h
    Engine/Core/Engine/ECS/Entity.h
    Engine/Core/Engine/ECS/Event.h
    Engine/Core/Engine/ECS/System.h
    Engine/Core/Engine/Engine.h
    Engine/Core/Engine/Systems/RenderSystem.h
    Engine/Core/Engine/Systems/TransformSystem.h
    Engine/Core/Engine/World.h
    Engine/Core/EntryPoint.h
    Engine/Core/External/DirectXTK/SimpleMath.h
    Engine/Core/External/DirectXTK/SimpleMathInl.h
    Engine/Core/Input/Input.h
    Engine/Core/Input/InputDevice.h
    Engine/Core/Input/KeyCode.h
    Engine/Core/Math/Math.h
    Engine/Core/Math/Types.h
    Engine/Core/Utils/Exceptions.h
    Engine/Core/Utils/Filesystem.h
    Engine/Core/Utils/Log.h
    Engine/Core/Utils/Singleton.h
    Engine/Core/Utils/StringConv.h
    Engine/Core/Utils/Timer.h
    Engine/Core/Utils/Timestamp.h
)

# target
add_library(NuiGraphics STATIC "")
set_target_properties(NuiGraphics PROPERTIES OUTPUT_NAME "NuiGraphics")
set_target_properties(NuiGraphics PROPERTIES ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/windows/x64/debug")
target_include_directories(NuiGraphics PRIVATE
    Engine
)
target_compile_definitions(NuiGraphics PRIVATE
    UNICODE
    DEBUG
    NUI_DEBUG
)
if(MSVC)
    target_compile_options(NuiGraphics PRIVATE /EHsc)
elseif(Clang)
    target_compile_options(NuiGraphics PRIVATE -fexceptions)
    target_compile_options(NuiGraphics PRIVATE -fcxx-exceptions)
elseif(Gcc)
    target_compile_options(NuiGraphics PRIVATE -fexceptions)
endif()
set_target_properties(NuiGraphics PROPERTIES C_EXTENSIONS OFF)
target_compile_features(NuiGraphics PRIVATE c_std_17)
set_target_properties(NuiGraphics PROPERTIES CXX_EXTENSIONS OFF)
target_compile_features(NuiGraphics PRIVATE cxx_std_23)
if(MSVC)
    target_compile_options(NuiGraphics PRIVATE $<$<CONFIG:Debug>:-Od>)
else()
    target_compile_options(NuiGraphics PRIVATE -O0)
endif()
if(MSVC)
    target_compile_options(NuiGraphics PRIVATE -Zi)
else()
    target_compile_options(NuiGraphics PRIVATE -g)
endif()
if(MSVC)
    set_property(TARGET NuiGraphics PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(NuiGraphics PRIVATE
    User32.lib
)
target_sources(NuiGraphics PRIVATE
    Engine/Graphics/Graphics.cpp
    Engine/Graphics/Rendering/D3DManager.cpp
    Engine/Graphics/States/BlendState.cpp
    Engine/Graphics/States/DepthStencilState.cpp
    Engine/Graphics/States/RasterizerState.cpp
    Engine/Graphics/States/SamplerState.cpp
    Engine/Graphics/Types/DepthStencilBuffer.cpp
    Engine/Graphics/Types/RenderTarget2D.cpp
    Engine/Graphics/Common.h
    Engine/Graphics/Graphics.h
    Engine/Graphics/Rendering/D3DManager.h
    Engine/Graphics/States/BlendState.h
    Engine/Graphics/States/DepthStencilState.h
    Engine/Graphics/States/RasterizerState.h
    Engine/Graphics/States/SamplerState.h
    Engine/Graphics/States/States.h
    Engine/Graphics/Types/ConstantBuffer.h
    Engine/Graphics/Types/DepthStencilBuffer.h
    Engine/Graphics/Types/RenderTarget2D.h
    Engine/Graphics/Types/Types.h
)

# target
add_executable(Testbench "")
set_target_properties(Testbench PROPERTIES OUTPUT_NAME "Testbench")
set_target_properties(Testbench PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/windows/x64/debug")
add_dependencies(Testbench NuiCore NuiGraphics)
target_include_directories(Testbench PRIVATE
    Engine
)
target_compile_definitions(Testbench PRIVATE
    UNICODE
    DEBUG
    NUI_DEBUG
)
if(MSVC)
    target_compile_options(Testbench PRIVATE /EHsc)
elseif(Clang)
    target_compile_options(Testbench PRIVATE -fexceptions)
    target_compile_options(Testbench PRIVATE -fcxx-exceptions)
elseif(Gcc)
    target_compile_options(Testbench PRIVATE -fexceptions)
endif()
set_target_properties(Testbench PROPERTIES C_EXTENSIONS OFF)
target_compile_features(Testbench PRIVATE c_std_17)
set_target_properties(Testbench PROPERTIES CXX_EXTENSIONS OFF)
target_compile_features(Testbench PRIVATE cxx_std_23)
if(MSVC)
    target_compile_options(Testbench PRIVATE $<$<CONFIG:Debug>:-Od>)
else()
    target_compile_options(Testbench PRIVATE -O0)
endif()
if(MSVC)
    target_compile_options(Testbench PRIVATE -Zi)
else()
    target_compile_options(Testbench PRIVATE -g)
endif()
if(MSVC)
    set_property(TARGET Testbench PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(Testbench PRIVATE
    NuiCore
    NuiGraphics
    User32.lib
    kernel32
    user32
    gdi32
    winspool
    advapi32
    shell32
    ole32
    oleaut32
    uuid
    odbc32
    odbccp32
    comctl32
    comdlg32
    setupapi
    shlwapi
    strsafe
)
target_link_directories(Testbench PRIVATE
    build/windows/x64/debug
)
target_link_options(Testbench PRIVATE
    -subsystem:windows
)
target_sources(Testbench PRIVATE
    Testbench/Main.cpp
    Testbench/Testbench/TestbenchApp.cpp
    Testbench/Testbench/TestbenchApp.h
)

